version: '3.8'
services:
        api:
                build:
                        context: .
                        dockerfile: apps/api/Dockerfile
                depends_on:
                        - postgres
                        - minio
                environment:
                        - DB_PORT=5432
                        - DB_HOST=postgres
                        - DB_NAME=pizza
                        - DB_USER=postgres
                        - DB_PASSWORD=postgres
                ports:
                        - '3001:3001'
                networks:
                        - cache-network
                        - db-network
                        - storage-network
        api-blog:
                build:
                        context: .
                        dockerfile: apps/api-blog/Dockerfile
                depends_on:
                        - postgres
                        - minio
                environment:
                        - DB_PORT=5432
                        - DB_HOST=postgres
                        - DB_NAME=pizza
                        - DB_USER=postgres
                        - DB_PASSWORD=postgres
                ports:
                        - '8080:8080'
                networks:
                        - cache-network
                        - db-network
                        - storage-network
        postgres:
                image: postgres:14.1-alpine
                restart: always
                networks:
                        - db-network
                environment:
                        - POSTGRES_USER=postgres
                        - POSTGRES_PASSWORD=postgres
                        - POSTGRES_DB=pizza
                ports:
                        - '5432:5432'
                volumes:
                        - postgresql-data:/var/lib/postgresql/data
                healthcheck:
                        test: ['CMD-SHELL', 'pg_isready -d db_prod']
                        interval: 30s
                        timeout: 60s
                        retries: 5
                        start_period: 30s
        minio:
                environment:
                        - MINIO_ROOT_USER=admin
                        - MINIO_ROOT_PASSWORD=admin123
                        - MINIO_DEFAULT_BUCKETS=general,general-test
                image: bitnami/minio
                ports:
                        - '9000:9000'
                        - '9001:9001'
                networks:
                        - storage-network
                volumes:
                        - minio-data:/data
                healthcheck:
                        test:
                                [
                                        'CMD',
                                        'curl -f http://localhost:9000/minio/health/live'
                                ]
                        interval: 30s
                        timeout: 20s
                        retries: 3
                restart: unless-stopped
        redis:
                container_name: redis
                image: redis:alpine
                command: ['redis-server', '--appendonly', 'yes']
                volumes:
                        - ./data/redis:/data
                user: '1000:1000'
                ports:
                        - '6379:6379'
                networks:
                        - cache-network
                restart: always
                healthcheck:
                        test: ['CMD', 'redis-cli', 'ping']
                        interval: 1m30s
                        timeout: 30s
                        retries: 5
                        start_period: 30s
networks:
        cache-network:
                driver: bridge
        db-network:
                driver: bridge
        storage-network:
                driver: bridge
volumes:
        minio-data:
                driver: local
                driver_opts:
                        type: none
                        o: bind
                        device: ${PWD}/data/minio
        postgresql-data:
                driver: local
                driver_opts:
                        type: none
                        o: bind
                        device: ${PWD}/data/postgresql
