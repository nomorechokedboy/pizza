version: '3.8'
services:
        api:
                build:
                        context: .
                        dockerfile: apps/api/Dockerfile
                depends_on:
                        - postgres
                        - minio-svc
                environment:
                        - DB_PORT=5432
                        - DB_HOST=postgres
                        - DB_NAME=pizza
                        - DB_USER=postgres
                        - DB_PASSWORD=postgres
                ports:
                        - '3001:3001'
                healthcheck:
                        test:
                                [
                                        'CMD',
                                        '/usr/bin/wget',
                                        '--no-verbose',
                                        '--tries=1',
                                        '--spider',
                                        'http://localhost:3001/healthz'
                                ]
                        interval: 1m30s
                        timeout: 30s
                        retries: 5
                        start_period: 30s
                restart: always
                networks:
                        - cache-network
                        - db-network
                        - storage-network
                        - monitor-network
        api-blog:
                build:
                        context: .
                        dockerfile: apps/api-blog/Dockerfile
                depends_on:
                        postgres:
                                condition: service_healthy
                        minio-svc:
                                condition: service_healthy
                deploy:
                        replicas: 3
                env_file:
                        - apps/api-blog/.env
                environment:
                        - DB_PORT=5432
                        - DB_HOST=postgres
                        - DB_NAME=pizza
                        - DB_USER=postgres
                        - DB_PASSWORD=postgres
                        - AUDIO_KEY=${AUDIO_KEY}
                        - AUDIO_LINK=${AUDIO_LINK}
                        - ENV=prod
                ports:
                        - '8080:8080'
                healthcheck:
                        test:
                                [
                                        'CMD',
                                        '/usr/bin/wget',
                                        '--no-verbose',
                                        '--tries=1',
                                        '--spider',
                                        'http://localhost:8080/healthCheck'
                                ]
                        interval: 1m30s
                        timeout: 30s
                        retries: 5
                        start_period: 30s
                restart: always
                networks:
                        - monitor-network
                        - cache-network
                        - db-network
                        - storage-network
        postgres:
                image: postgres:14.1-alpine
                restart: always
                networks:
                        - db-network
                environment:
                        - POSTGRES_USER=postgres
                        - POSTGRES_PASSWORD=postgres
                        - POSTGRES_DB=pizza
                ports:
                        - '5432:5432'
                volumes:
                        - postgresql-data:/var/lib/postgresql/data
                healthcheck:
                        test: ['CMD-SHELL', 'pg_isready -d db_prod']
                        interval: 30s
                        timeout: 60s
                        retries: 5
                        start_period: 30s
        postgres-exporter:
                image: prometheuscommunity/postgres-exporter
                ports:
                        - 9187:9187
                environment:
                        DATA_SOURCE_NAME: 'postgresql://postgres:postgres@postgres:5432/pizza?sslmode=disable'
                networks:
                        - db-network
                        - monitor-network
        minio-svc:
                environment:
                        - MINIO_ROOT_USER=admin
                        - MINIO_ROOT_PASSWORD=admin123
                        - MINIO_DEFAULT_BUCKETS=general,general-test
                image: bitnami/minio
                ports:
                        - '9000:9000'
                        - '9001:9001'
                networks:
                        - storage-network
                volumes:
                        - minio-data:/data
                healthcheck:
                        test:
                                [
                                        'CMD',
                                        'curl',
                                        '-f',
                                        'http://localhost:9000/minio/health/live'
                                ]
                        interval: 30s
                        timeout: 20s
                        retries: 3
                restart: unless-stopped
        redis:
                container_name: redis
                image: redis:alpine
                command: ['redis-server', '--appendonly', 'yes']
                volumes:
                        - redis-data:/data
                ports:
                        - '6379:6379'
                networks:
                        - cache-network
                restart: always
                healthcheck:
                        test: ['CMD', 'redis-cli', 'ping']
                        interval: 1m30s
                        timeout: 30s
                        retries: 5
                        start_period: 30s
        prometheus:
                image: prom/prometheus:v2.40.4
                ports:
                        - 9090:9090
                volumes:
                        - ./deploy/prometheus/config.yml:/etc/prometheus/prometheus.yml
                networks:
                        - monitor-network
        grafana:
                image: grafana/grafana:9.3.0
                ports:
                        - 3005:3000
                environment:
                        - GF_SECURITY_ADMIN_USER=$MONITOR_ADMIN_USER
                        - GF_SECURITY_ADMIN_PASSWORD=$MONITOR_ADMIN_PASSWORD
                volumes:
                        - ./deploy/grafana/dataSources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
                        - grafana:/var/lib/grafana
                networks:
                        - monitor-network
networks:
        cache-network:
                driver: bridge
        db-network:
                driver: bridge
        storage-network:
                driver: bridge
        monitor-network:
                driver: bridge
volumes:
        redis-data:
                driver: local
                driver_opts:
                        type: none
                        o: bind
                        device: ${PWD}/data/redis
        minio-data:
                driver: local
                driver_opts:
                        type: none
                        o: bind
                        device: ${PWD}/data/minio
        postgresql-data:
                driver: local
                driver_opts:
                        type: none
                        o: bind
                        device: ${PWD}/data/postgresql
        grafana:
                driver: local
                driver_opts:
                        type: none
                        o: bind
                        device: ${PWD}/data/grafana
