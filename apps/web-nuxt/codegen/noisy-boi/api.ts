/* tslint:disable */
/* eslint-disable */
/**
 * noisy-boi
 * My Api description
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, {
	AxiosInstance,
	AxiosPromise,
	AxiosRequestConfig
} from 'axios'
import { Configuration } from './configuration'
// Some imports not used depending on template conditions
// @ts-ignore
import {
	DUMMY_BASE_URL,
	assertParamExists,
	createRequestFunction,
	setBearerAuthToObject,
	setSearchParams,
	toPathString
} from './common'
// @ts-ignore
import { BASE_PATH, BaseAPI, RequestArgs, RequiredError } from './base'

/**
 *
 * @export
 * @interface HealthCheckResponse
 */
export interface HealthCheckResponse {
	/**
	 *
	 * @type {string}
	 * @memberof HealthCheckResponse
	 */
	message: string
	/**
	 *
	 * @type {number}
	 * @memberof HealthCheckResponse
	 */
	timestamp: number
	/**
	 *
	 * @type {number}
	 * @memberof HealthCheckResponse
	 */
	uptime: number
}
/**
 *
 * @export
 * @interface Notification
 */
export interface Notification {
	/**
	 *
	 * @type {number}
	 * @memberof Notification
	 */
	id: number
	/**
	 *
	 * @type {User}
	 * @memberof Notification
	 */
	notifier: User
	/**
	 *
	 * @type {string}
	 * @memberof Notification
	 */
	readAt?: string | null
}
/**
 *
 * @export
 * @interface NotificationChange
 */
export interface NotificationChange {
	/**
	 *
	 * @type {User}
	 * @memberof NotificationChange
	 */
	actor: User
	/**
	 *
	 * @type {number}
	 * @memberof NotificationChange
	 */
	id: number
}
/**
 *
 * @export
 * @interface NotificationObject
 */
export interface NotificationObject {
	/**
	 *
	 * @type {string}
	 * @memberof NotificationObject
	 */
	actionType: string
	/**
	 *
	 * @type {string}
	 * @memberof NotificationObject
	 */
	createdAt: string
	/**
	 *
	 * @type {string}
	 * @memberof NotificationObject
	 */
	entityData: string
	/**
	 *
	 * @type {number}
	 * @memberof NotificationObject
	 */
	entityId: number
	/**
	 *
	 * @type {number}
	 * @memberof NotificationObject
	 */
	id: number
	/**
	 *
	 * @type {NotificationChange}
	 * @memberof NotificationObject
	 */
	notificationChange: NotificationChange
	/**
	 *
	 * @type {Array<Notification>}
	 * @memberof NotificationObject
	 */
	notifications: Array<Notification>
}
/**
 *
 * @export
 * @interface PaginationResNotificationObject
 */
export interface PaginationResNotificationObject {
	/**
	 *
	 * @type {Array<NotificationObject>}
	 * @memberof PaginationResNotificationObject
	 */
	data: Array<NotificationObject>
	/**
	 *
	 * @type {number}
	 * @memberof PaginationResNotificationObject
	 */
	page: number
	/**
	 *
	 * @type {number}
	 * @memberof PaginationResNotificationObject
	 */
	pageSize: number
}
/**
 *
 * @export
 * @interface Post
 */
export interface Post {
	/**
	 *
	 * @type {string}
	 * @memberof Post
	 */
	title: string
}
/**
 *
 * @export
 * @interface User
 */
export interface User {
	/**
	 *
	 * @type {string}
	 * @memberof User
	 */
	avatar: string
	/**
	 *
	 * @type {string}
	 * @memberof User
	 */
	fullName?: string | null
	/**
	 *
	 * @type {number}
	 * @memberof User
	 */
	id: number
	/**
	 *
	 * @type {string}
	 * @memberof User
	 */
	identifier: string
	/**
	 *
	 * @type {string}
	 * @memberof User
	 */
	userName: string
}

/**
 * HealthCheckApi - axios parameter creator
 * @export
 */
export const HealthCheckApiAxiosParamCreator = function (
	configuration?: Configuration
) {
	return {
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		healthCheck: async (
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			const localVarPath = `/healthz`
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(
				localVarPath,
				DUMMY_BASE_URL
			)
			let baseOptions
			if (configuration) {
				baseOptions = configuration.baseOptions
			}

			const localVarRequestOptions = {
				method: 'GET',
				...baseOptions,
				...options
			}
			const localVarHeaderParameter = {} as any
			const localVarQueryParameter = {} as any

			setSearchParams(localVarUrlObj, localVarQueryParameter)
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers
					? baseOptions.headers
					: {}
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			}

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			}
		}
	}
}

/**
 * HealthCheckApi - functional programming interface
 * @export
 */
export const HealthCheckApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator =
		HealthCheckApiAxiosParamCreator(configuration)
	return {
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async healthCheck(
			options?: AxiosRequestConfig
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string
			) => AxiosPromise<HealthCheckResponse>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.healthCheck(
					options
				)
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			)
		}
	}
}

/**
 * HealthCheckApi - factory interface
 * @export
 */
export const HealthCheckApiFactory = function (
	configuration?: Configuration,
	basePath?: string,
	axios?: AxiosInstance
) {
	const localVarFp = HealthCheckApiFp(configuration)
	return {
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		healthCheck(options?: any): AxiosPromise<HealthCheckResponse> {
			return localVarFp
				.healthCheck(options)
				.then((request) => request(axios, basePath))
		}
	}
}

/**
 * HealthCheckApi - object-oriented interface
 * @export
 * @class HealthCheckApi
 * @extends {BaseAPI}
 */
export class HealthCheckApi extends BaseAPI {
	/**
	 *
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof HealthCheckApi
	 */
	public healthCheck(options?: AxiosRequestConfig) {
		return HealthCheckApiFp(this.configuration)
			.healthCheck(options)
			.then((request) => request(this.axios, this.basePath))
	}
}

/**
 * NotificationApi - axios parameter creator
 * @export
 */
export const NotificationApiAxiosParamCreator = function (
	configuration?: Configuration
) {
	return {
		/**
		 *
		 * @param {number} [page]
		 * @param {number} [pageSize]
		 * @param {string} [sort]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getNotifications: async (
			page?: number,
			pageSize?: number,
			sort?: string,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			const localVarPath = `/notifications`
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(
				localVarPath,
				DUMMY_BASE_URL
			)
			let baseOptions
			if (configuration) {
				baseOptions = configuration.baseOptions
			}

			const localVarRequestOptions = {
				method: 'GET',
				...baseOptions,
				...options
			}
			const localVarHeaderParameter = {} as any
			const localVarQueryParameter = {} as any

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(
				localVarHeaderParameter,
				configuration
			)

			if (page !== undefined) {
				localVarQueryParameter['page'] = page
			}

			if (pageSize !== undefined) {
				localVarQueryParameter['pageSize'] = pageSize
			}

			if (sort !== undefined) {
				localVarQueryParameter['sort'] = sort
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter)
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers
					? baseOptions.headers
					: {}
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			}

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			}
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		notify: async (
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			const localVarPath = `/notify`
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(
				localVarPath,
				DUMMY_BASE_URL
			)
			let baseOptions
			if (configuration) {
				baseOptions = configuration.baseOptions
			}

			const localVarRequestOptions = {
				method: 'GET',
				...baseOptions,
				...options
			}
			const localVarHeaderParameter = {} as any
			const localVarQueryParameter = {} as any

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(
				localVarHeaderParameter,
				configuration
			)

			setSearchParams(localVarUrlObj, localVarQueryParameter)
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers
					? baseOptions.headers
					: {}
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			}

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			}
		},
		/**
		 *
		 * @param {number} notificationObjectId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		readAt: async (
			notificationObjectId: number,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'notificationObjectId' is not null or undefined
			assertParamExists(
				'readAt',
				'notificationObjectId',
				notificationObjectId
			)
			const localVarPath =
				`/{notification_object_id}/read_at`.replace(
					`{${'notification_object_id'}}`,
					encodeURIComponent(
						String(notificationObjectId)
					)
				)
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(
				localVarPath,
				DUMMY_BASE_URL
			)
			let baseOptions
			if (configuration) {
				baseOptions = configuration.baseOptions
			}

			const localVarRequestOptions = {
				method: 'PUT',
				...baseOptions,
				...options
			}
			const localVarHeaderParameter = {} as any
			const localVarQueryParameter = {} as any

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(
				localVarHeaderParameter,
				configuration
			)

			setSearchParams(localVarUrlObj, localVarQueryParameter)
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers
					? baseOptions.headers
					: {}
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			}

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			}
		}
	}
}

/**
 * NotificationApi - functional programming interface
 * @export
 */
export const NotificationApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator =
		NotificationApiAxiosParamCreator(configuration)
	return {
		/**
		 *
		 * @param {number} [page]
		 * @param {number} [pageSize]
		 * @param {string} [sort]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getNotifications(
			page?: number,
			pageSize?: number,
			sort?: string,
			options?: AxiosRequestConfig
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string
			) => AxiosPromise<PaginationResNotificationObject>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.getNotifications(
					page,
					pageSize,
					sort,
					options
				)
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			)
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async notify(
			options?: AxiosRequestConfig
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string
			) => AxiosPromise<NotificationObject>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.notify(options)
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			)
		},
		/**
		 *
		 * @param {number} notificationObjectId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async readAt(
			notificationObjectId: number,
			options?: AxiosRequestConfig
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string
			) => AxiosPromise<Notification>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.readAt(
					notificationObjectId,
					options
				)
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			)
		}
	}
}

/**
 * NotificationApi - factory interface
 * @export
 */
export const NotificationApiFactory = function (
	configuration?: Configuration,
	basePath?: string,
	axios?: AxiosInstance
) {
	const localVarFp = NotificationApiFp(configuration)
	return {
		/**
		 *
		 * @param {number} [page]
		 * @param {number} [pageSize]
		 * @param {string} [sort]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getNotifications(
			page?: number,
			pageSize?: number,
			sort?: string,
			options?: any
		): AxiosPromise<PaginationResNotificationObject> {
			return localVarFp
				.getNotifications(page, pageSize, sort, options)
				.then((request) => request(axios, basePath))
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		notify(options?: any): AxiosPromise<NotificationObject> {
			return localVarFp
				.notify(options)
				.then((request) => request(axios, basePath))
		},
		/**
		 *
		 * @param {number} notificationObjectId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		readAt(
			notificationObjectId: number,
			options?: any
		): AxiosPromise<Notification> {
			return localVarFp
				.readAt(notificationObjectId, options)
				.then((request) => request(axios, basePath))
		}
	}
}

/**
 * NotificationApi - object-oriented interface
 * @export
 * @class NotificationApi
 * @extends {BaseAPI}
 */
export class NotificationApi extends BaseAPI {
	/**
	 *
	 * @param {number} [page]
	 * @param {number} [pageSize]
	 * @param {string} [sort]
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof NotificationApi
	 */
	public getNotifications(
		page?: number,
		pageSize?: number,
		sort?: string,
		options?: AxiosRequestConfig
	) {
		return NotificationApiFp(this.configuration)
			.getNotifications(page, pageSize, sort, options)
			.then((request) => request(this.axios, this.basePath))
	}

	/**
	 *
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof NotificationApi
	 */
	public notify(options?: AxiosRequestConfig) {
		return NotificationApiFp(this.configuration)
			.notify(options)
			.then((request) => request(this.axios, this.basePath))
	}

	/**
	 *
	 * @param {number} notificationObjectId
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof NotificationApi
	 */
	public readAt(
		notificationObjectId: number,
		options?: AxiosRequestConfig
	) {
		return NotificationApiFp(this.configuration)
			.readAt(notificationObjectId, options)
			.then((request) => request(this.axios, this.basePath))
	}
}
