/* tslint:disable */
/* eslint-disable */
/**
 * web Blog
 * This is a web blog
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from './configuration'
import globalAxios, {
	AxiosPromise,
	AxiosInstance,
	AxiosRequestConfig
} from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
	DUMMY_BASE_URL,
	assertParamExists,
	setApiKeyToObject,
	setBasicAuthToObject,
	setBearerAuthToObject,
	setOAuthToObject,
	setSearchParams,
	serializeDataIfNeeded,
	toPathString,
	createRequestFunction
} from './common'
// @ts-ignore
import {
	BASE_PATH,
	COLLECTION_FORMATS,
	RequestArgs,
	BaseAPI,
	RequiredError
} from './base'

/**
 *
 * @export
 * @interface EntitiesAuth
 */
export interface EntitiesAuth {
	/**
	 *
	 * @type {string}
	 * @memberof EntitiesAuth
	 */
	refresh_token?: string
	/**
	 *
	 * @type {string}
	 * @memberof EntitiesAuth
	 */
	token?: string
}
/**
 *
 * @export
 * @interface EntitiesSignUpBody
 */
export interface EntitiesSignUpBody {
	/**
	 *
	 * @type {string}
	 * @memberof EntitiesSignUpBody
	 */
	email?: string
	/**
	 *
	 * @type {string}
	 * @memberof EntitiesSignUpBody
	 */
	fullname?: string
	/**
	 *
	 * @type {string}
	 * @memberof EntitiesSignUpBody
	 */
	password?: string
	/**
	 *
	 * @type {string}
	 * @memberof EntitiesSignUpBody
	 */
	username?: string
}
/**
 *
 * @export
 * @interface EntitiesUser
 */
export interface EntitiesUser {
	/**
	 *
	 * @type {string}
	 * @memberof EntitiesUser
	 */
	avatar?: string
	/**
	 *
	 * @type {string}
	 * @memberof EntitiesUser
	 */
	createdAt?: string
	/**
	 *
	 * @type {string}
	 * @memberof EntitiesUser
	 */
	email?: string
	/**
	 *
	 * @type {string}
	 * @memberof EntitiesUser
	 */
	fullname?: string
	/**
	 *
	 * @type {number}
	 * @memberof EntitiesUser
	 */
	id?: number
	/**
	 *
	 * @type {string}
	 * @memberof EntitiesUser
	 */
	identifier?: string
	/**
	 *
	 * @type {string}
	 * @memberof EntitiesUser
	 */
	password?: string
	/**
	 *
	 * @type {string}
	 * @memberof EntitiesUser
	 */
	phoneNumber?: string
	/**
	 *
	 * @type {string}
	 * @memberof EntitiesUser
	 */
	updateAt?: string
	/**
	 *
	 * @type {string}
	 * @memberof EntitiesUser
	 */
	username?: string
}
/**
 *
 * @export
 * @interface EntitiesUserLogin
 */
export interface EntitiesUserLogin {
	/**
	 *
	 * @type {string}
	 * @memberof EntitiesUserLogin
	 */
	identifier?: string
	/**
	 *
	 * @type {string}
	 * @memberof EntitiesUserLogin
	 */
	password?: string
}
/**
 *
 * @export
 * @interface EntitiesUserReq
 */
export interface EntitiesUserReq {
	/**
	 *
	 * @type {string}
	 * @memberof EntitiesUserReq
	 */
	avatar?: string
	/**
	 *
	 * @type {string}
	 * @memberof EntitiesUserReq
	 */
	email?: string
	/**
	 *
	 * @type {string}
	 * @memberof EntitiesUserReq
	 */
	fullname?: string
	/**
	 *
	 * @type {string}
	 * @memberof EntitiesUserReq
	 */
	password?: string
	/**
	 *
	 * @type {string}
	 * @memberof EntitiesUserReq
	 */
	phonenumber?: string
	/**
	 *
	 * @type {string}
	 * @memberof EntitiesUserReq
	 */
	username?: string
}
/**
 *
 * @export
 * @interface EntitiesUserResponse
 */
export interface EntitiesUserResponse {
	/**
	 *
	 * @type {string}
	 * @memberof EntitiesUserResponse
	 */
	avatar?: string
	/**
	 *
	 * @type {string}
	 * @memberof EntitiesUserResponse
	 */
	email?: string
	/**
	 *
	 * @type {string}
	 * @memberof EntitiesUserResponse
	 */
	fullname?: string
	/**
	 *
	 * @type {number}
	 * @memberof EntitiesUserResponse
	 */
	id?: number
	/**
	 *
	 * @type {string}
	 * @memberof EntitiesUserResponse
	 */
	phone?: string
	/**
	 *
	 * @type {string}
	 * @memberof EntitiesUserResponse
	 */
	username?: string
}
/**
 *
 * @export
 * @interface HandlerForgotPasswordUserEmailReq
 */
export interface HandlerForgotPasswordUserEmailReq {
	/**
	 *
	 * @type {string}
	 * @memberof HandlerForgotPasswordUserEmailReq
	 */
	email?: string
}
/**
 *
 * @export
 * @interface HandlerRefreshTokenRequest
 */
export interface HandlerRefreshTokenRequest {
	/**
	 *
	 * @type {string}
	 * @memberof HandlerRefreshTokenRequest
	 */
	refresh_token?: string
}
/**
 *
 * @export
 * @interface HandlerResetPasswordResetPasswordReq
 */
export interface HandlerResetPasswordResetPasswordReq {
	/**
	 *
	 * @type {string}
	 * @memberof HandlerResetPasswordResetPasswordReq
	 */
	password?: string
	/**
	 *
	 * @type {string}
	 * @memberof HandlerResetPasswordResetPasswordReq
	 */
	token?: string
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (
	configuration?: Configuration
) {
	return {
		/**
		 * send email to user for reset password
		 * @summary option when user forgot password
		 * @param {HandlerForgotPasswordUserEmailReq} todo user email
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		authForgotPasswordPost: async (
			todo: HandlerForgotPasswordUserEmailReq,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'todo' is not null or undefined
			assertParamExists(
				'authForgotPasswordPost',
				'todo',
				todo
			)
			const localVarPath = `/auth/forgot-password`
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(
				localVarPath,
				DUMMY_BASE_URL
			)
			let baseOptions
			if (configuration) {
				baseOptions = configuration.baseOptions
			}

			const localVarRequestOptions = {
				method: 'POST',
				...baseOptions,
				...options
			}
			const localVarHeaderParameter = {} as any
			const localVarQueryParameter = {} as any

			localVarHeaderParameter['Content-Type'] =
				'application/json'

			setSearchParams(localVarUrlObj, localVarQueryParameter)
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers
					? baseOptions.headers
					: {}
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			}
			localVarRequestOptions.data = serializeDataIfNeeded(
				todo,
				localVarRequestOptions,
				configuration
			)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			}
		},
		/**
		 * Use for login response the refresh_token and accessToken
		 * @summary User Login
		 * @param {EntitiesUserLogin} todo Login
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		authLoginPost: async (
			todo: EntitiesUserLogin,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'todo' is not null or undefined
			assertParamExists('authLoginPost', 'todo', todo)
			const localVarPath = `/auth/login`
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(
				localVarPath,
				DUMMY_BASE_URL
			)
			let baseOptions
			if (configuration) {
				baseOptions = configuration.baseOptions
			}

			const localVarRequestOptions = {
				method: 'POST',
				...baseOptions,
				...options
			}
			const localVarHeaderParameter = {} as any
			const localVarQueryParameter = {} as any

			localVarHeaderParameter['Content-Type'] =
				'application/json'

			setSearchParams(localVarUrlObj, localVarQueryParameter)
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers
					? baseOptions.headers
					: {}
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			}
			localVarRequestOptions.data = serializeDataIfNeeded(
				todo,
				localVarRequestOptions,
				configuration
			)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			}
		},
		/**
		 * Get UserInfo by accessToken
		 * @summary Get user infor by token
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		authMeGet: async (
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			const localVarPath = `/auth/me`
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(
				localVarPath,
				DUMMY_BASE_URL
			)
			let baseOptions
			if (configuration) {
				baseOptions = configuration.baseOptions
			}

			const localVarRequestOptions = {
				method: 'GET',
				...baseOptions,
				...options
			}
			const localVarHeaderParameter = {} as any
			const localVarQueryParameter = {} as any

			// authentication ApiKeyAuth required
			await setApiKeyToObject(
				localVarHeaderParameter,
				'Authorization',
				configuration
			)

			setSearchParams(localVarUrlObj, localVarQueryParameter)
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers
					? baseOptions.headers
					: {}
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			}

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			}
		},
		/**
		 * Create a new access token.
		 * @summary create a new access token
		 * @param {HandlerRefreshTokenRequest} request refresh_token
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		authRefreshTokenPost: async (
			request: HandlerRefreshTokenRequest,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'request' is not null or undefined
			assertParamExists(
				'authRefreshTokenPost',
				'request',
				request
			)
			const localVarPath = `/auth/refresh-token`
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(
				localVarPath,
				DUMMY_BASE_URL
			)
			let baseOptions
			if (configuration) {
				baseOptions = configuration.baseOptions
			}

			const localVarRequestOptions = {
				method: 'POST',
				...baseOptions,
				...options
			}
			const localVarHeaderParameter = {} as any
			const localVarQueryParameter = {} as any

			localVarHeaderParameter['Content-Type'] =
				'application/json'

			setSearchParams(localVarUrlObj, localVarQueryParameter)
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers
					? baseOptions.headers
					: {}
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			}
			localVarRequestOptions.data = serializeDataIfNeeded(
				request,
				localVarRequestOptions,
				configuration
			)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			}
		},
		/**
		 * Create New UserUsecase
		 * @summary Create User
		 * @param {EntitiesSignUpBody} todo New User
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		authRegisterPost: async (
			todo: EntitiesSignUpBody,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'todo' is not null or undefined
			assertParamExists('authRegisterPost', 'todo', todo)
			const localVarPath = `/auth/register`
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(
				localVarPath,
				DUMMY_BASE_URL
			)
			let baseOptions
			if (configuration) {
				baseOptions = configuration.baseOptions
			}

			const localVarRequestOptions = {
				method: 'POST',
				...baseOptions,
				...options
			}
			const localVarHeaderParameter = {} as any
			const localVarQueryParameter = {} as any

			localVarHeaderParameter['Content-Type'] =
				'application/json'

			setSearchParams(localVarUrlObj, localVarQueryParameter)
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers
					? baseOptions.headers
					: {}
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			}
			localVarRequestOptions.data = serializeDataIfNeeded(
				todo,
				localVarRequestOptions,
				configuration
			)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			}
		},
		/**
		 * reset password by token
		 * @summary reset user password
		 * @param {HandlerResetPasswordResetPasswordReq} todo new Password
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		authResetPasswordPut: async (
			todo: HandlerResetPasswordResetPasswordReq,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'todo' is not null or undefined
			assertParamExists('authResetPasswordPut', 'todo', todo)
			const localVarPath = `/auth/reset-password`
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(
				localVarPath,
				DUMMY_BASE_URL
			)
			let baseOptions
			if (configuration) {
				baseOptions = configuration.baseOptions
			}

			const localVarRequestOptions = {
				method: 'PUT',
				...baseOptions,
				...options
			}
			const localVarHeaderParameter = {} as any
			const localVarQueryParameter = {} as any

			localVarHeaderParameter['Content-Type'] =
				'application/json'

			setSearchParams(localVarUrlObj, localVarQueryParameter)
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers
					? baseOptions.headers
					: {}
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			}
			localVarRequestOptions.data = serializeDataIfNeeded(
				todo,
				localVarRequestOptions,
				configuration
			)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			}
		}
	}
}

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator =
		AuthApiAxiosParamCreator(configuration)
	return {
		/**
		 * send email to user for reset password
		 * @summary option when user forgot password
		 * @param {HandlerForgotPasswordUserEmailReq} todo user email
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async authForgotPasswordPost(
			todo: HandlerForgotPasswordUserEmailReq,
			options?: AxiosRequestConfig
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string
			) => AxiosPromise<void>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.authForgotPasswordPost(
					todo,
					options
				)
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			)
		},
		/**
		 * Use for login response the refresh_token and accessToken
		 * @summary User Login
		 * @param {EntitiesUserLogin} todo Login
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async authLoginPost(
			todo: EntitiesUserLogin,
			options?: AxiosRequestConfig
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string
			) => AxiosPromise<EntitiesAuth>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.authLoginPost(
					todo,
					options
				)
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			)
		},
		/**
		 * Get UserInfo by accessToken
		 * @summary Get user infor by token
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async authMeGet(
			options?: AxiosRequestConfig
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string
			) => AxiosPromise<EntitiesUser>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.authMeGet(
					options
				)
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			)
		},
		/**
		 * Create a new access token.
		 * @summary create a new access token
		 * @param {HandlerRefreshTokenRequest} request refresh_token
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async authRefreshTokenPost(
			request: HandlerRefreshTokenRequest,
			options?: AxiosRequestConfig
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string
			) => AxiosPromise<EntitiesAuth>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.authRefreshTokenPost(
					request,
					options
				)
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			)
		},
		/**
		 * Create New UserUsecase
		 * @summary Create User
		 * @param {EntitiesSignUpBody} todo New User
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async authRegisterPost(
			todo: EntitiesSignUpBody,
			options?: AxiosRequestConfig
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string
			) => AxiosPromise<void>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.authRegisterPost(
					todo,
					options
				)
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			)
		},
		/**
		 * reset password by token
		 * @summary reset user password
		 * @param {HandlerResetPasswordResetPasswordReq} todo new Password
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async authResetPasswordPut(
			todo: HandlerResetPasswordResetPasswordReq,
			options?: AxiosRequestConfig
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string
			) => AxiosPromise<void>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.authResetPasswordPut(
					todo,
					options
				)
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			)
		}
	}
}

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (
	configuration?: Configuration,
	basePath?: string,
	axios?: AxiosInstance
) {
	const localVarFp = AuthApiFp(configuration)
	return {
		/**
		 * send email to user for reset password
		 * @summary option when user forgot password
		 * @param {HandlerForgotPasswordUserEmailReq} todo user email
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		authForgotPasswordPost(
			todo: HandlerForgotPasswordUserEmailReq,
			options?: any
		): AxiosPromise<void> {
			return localVarFp
				.authForgotPasswordPost(todo, options)
				.then((request) => request(axios, basePath))
		},
		/**
		 * Use for login response the refresh_token and accessToken
		 * @summary User Login
		 * @param {EntitiesUserLogin} todo Login
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		authLoginPost(
			todo: EntitiesUserLogin,
			options?: any
		): AxiosPromise<EntitiesAuth> {
			return localVarFp
				.authLoginPost(todo, options)
				.then((request) => request(axios, basePath))
		},
		/**
		 * Get UserInfo by accessToken
		 * @summary Get user infor by token
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		authMeGet(options?: any): AxiosPromise<EntitiesUser> {
			return localVarFp
				.authMeGet(options)
				.then((request) => request(axios, basePath))
		},
		/**
		 * Create a new access token.
		 * @summary create a new access token
		 * @param {HandlerRefreshTokenRequest} request refresh_token
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		authRefreshTokenPost(
			request: HandlerRefreshTokenRequest,
			options?: any
		): AxiosPromise<EntitiesAuth> {
			return localVarFp
				.authRefreshTokenPost(request, options)
				.then((request) => request(axios, basePath))
		},
		/**
		 * Create New UserUsecase
		 * @summary Create User
		 * @param {EntitiesSignUpBody} todo New User
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		authRegisterPost(
			todo: EntitiesSignUpBody,
			options?: any
		): AxiosPromise<void> {
			return localVarFp
				.authRegisterPost(todo, options)
				.then((request) => request(axios, basePath))
		},
		/**
		 * reset password by token
		 * @summary reset user password
		 * @param {HandlerResetPasswordResetPasswordReq} todo new Password
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		authResetPasswordPut(
			todo: HandlerResetPasswordResetPasswordReq,
			options?: any
		): AxiosPromise<void> {
			return localVarFp
				.authResetPasswordPut(todo, options)
				.then((request) => request(axios, basePath))
		}
	}
}

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
	/**
	 * send email to user for reset password
	 * @summary option when user forgot password
	 * @param {HandlerForgotPasswordUserEmailReq} todo user email
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AuthApi
	 */
	public authForgotPasswordPost(
		todo: HandlerForgotPasswordUserEmailReq,
		options?: AxiosRequestConfig
	) {
		return AuthApiFp(this.configuration)
			.authForgotPasswordPost(todo, options)
			.then((request) => request(this.axios, this.basePath))
	}

	/**
	 * Use for login response the refresh_token and accessToken
	 * @summary User Login
	 * @param {EntitiesUserLogin} todo Login
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AuthApi
	 */
	public authLoginPost(
		todo: EntitiesUserLogin,
		options?: AxiosRequestConfig
	) {
		return AuthApiFp(this.configuration)
			.authLoginPost(todo, options)
			.then((request) => request(this.axios, this.basePath))
	}

	/**
	 * Get UserInfo by accessToken
	 * @summary Get user infor by token
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AuthApi
	 */
	public authMeGet(options?: AxiosRequestConfig) {
		return AuthApiFp(this.configuration)
			.authMeGet(options)
			.then((request) => request(this.axios, this.basePath))
	}

	/**
	 * Create a new access token.
	 * @summary create a new access token
	 * @param {HandlerRefreshTokenRequest} request refresh_token
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AuthApi
	 */
	public authRefreshTokenPost(
		request: HandlerRefreshTokenRequest,
		options?: AxiosRequestConfig
	) {
		return AuthApiFp(this.configuration)
			.authRefreshTokenPost(request, options)
			.then((request) => request(this.axios, this.basePath))
	}

	/**
	 * Create New UserUsecase
	 * @summary Create User
	 * @param {EntitiesSignUpBody} todo New User
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AuthApi
	 */
	public authRegisterPost(
		todo: EntitiesSignUpBody,
		options?: AxiosRequestConfig
	) {
		return AuthApiFp(this.configuration)
			.authRegisterPost(todo, options)
			.then((request) => request(this.axios, this.basePath))
	}

	/**
	 * reset password by token
	 * @summary reset user password
	 * @param {HandlerResetPasswordResetPasswordReq} todo new Password
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AuthApi
	 */
	public authResetPasswordPut(
		todo: HandlerResetPasswordResetPasswordReq,
		options?: AxiosRequestConfig
	) {
		return AuthApiFp(this.configuration)
			.authResetPasswordPut(todo, options)
			.then((request) => request(this.axios, this.basePath))
	}
}

/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (
	configuration?: Configuration
) {
	return {
		/**
		 *
		 * @summary find user profile
		 * @param {string} id User Id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		userIdGet: async (
			id: string,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('userIdGet', 'id', id)
			const localVarPath = `/user/{id}`.replace(
				`{${'id'}}`,
				encodeURIComponent(String(id))
			)
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(
				localVarPath,
				DUMMY_BASE_URL
			)
			let baseOptions
			if (configuration) {
				baseOptions = configuration.baseOptions
			}

			const localVarRequestOptions = {
				method: 'GET',
				...baseOptions,
				...options
			}
			const localVarHeaderParameter = {} as any
			const localVarQueryParameter = {} as any

			setSearchParams(localVarUrlObj, localVarQueryParameter)
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers
					? baseOptions.headers
					: {}
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			}

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			}
		},
		/**
		 * Update UserInfo by Id from accessToken
		 * @summary Update user infor by token
		 * @param {EntitiesUserReq} todo Updated User
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		userUpdatePut: async (
			todo: EntitiesUserReq,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'todo' is not null or undefined
			assertParamExists('userUpdatePut', 'todo', todo)
			const localVarPath = `/user/update`
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(
				localVarPath,
				DUMMY_BASE_URL
			)
			let baseOptions
			if (configuration) {
				baseOptions = configuration.baseOptions
			}

			const localVarRequestOptions = {
				method: 'PUT',
				...baseOptions,
				...options
			}
			const localVarHeaderParameter = {} as any
			const localVarQueryParameter = {} as any

			// authentication ApiKeyAuth required
			await setApiKeyToObject(
				localVarHeaderParameter,
				'Authorization',
				configuration
			)

			localVarHeaderParameter['Content-Type'] =
				'application/json'

			setSearchParams(localVarUrlObj, localVarQueryParameter)
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers
					? baseOptions.headers
					: {}
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			}
			localVarRequestOptions.data = serializeDataIfNeeded(
				todo,
				localVarRequestOptions,
				configuration
			)

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			}
		}
	}
}

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator =
		UserApiAxiosParamCreator(configuration)
	return {
		/**
		 *
		 * @summary find user profile
		 * @param {string} id User Id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async userIdGet(
			id: string,
			options?: AxiosRequestConfig
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string
			) => AxiosPromise<EntitiesUserResponse>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.userIdGet(
					id,
					options
				)
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			)
		},
		/**
		 * Update UserInfo by Id from accessToken
		 * @summary Update user infor by token
		 * @param {EntitiesUserReq} todo Updated User
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async userUpdatePut(
			todo: EntitiesUserReq,
			options?: AxiosRequestConfig
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string
			) => AxiosPromise<EntitiesUser>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.userUpdatePut(
					todo,
					options
				)
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			)
		}
	}
}

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (
	configuration?: Configuration,
	basePath?: string,
	axios?: AxiosInstance
) {
	const localVarFp = UserApiFp(configuration)
	return {
		/**
		 *
		 * @summary find user profile
		 * @param {string} id User Id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		userIdGet(
			id: string,
			options?: any
		): AxiosPromise<EntitiesUserResponse> {
			return localVarFp
				.userIdGet(id, options)
				.then((request) => request(axios, basePath))
		},
		/**
		 * Update UserInfo by Id from accessToken
		 * @summary Update user infor by token
		 * @param {EntitiesUserReq} todo Updated User
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		userUpdatePut(
			todo: EntitiesUserReq,
			options?: any
		): AxiosPromise<EntitiesUser> {
			return localVarFp
				.userUpdatePut(todo, options)
				.then((request) => request(axios, basePath))
		}
	}
}

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
	/**
	 *
	 * @summary find user profile
	 * @param {string} id User Id
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof UserApi
	 */
	public userIdGet(id: string, options?: AxiosRequestConfig) {
		return UserApiFp(this.configuration)
			.userIdGet(id, options)
			.then((request) => request(this.axios, this.basePath))
	}

	/**
	 * Update UserInfo by Id from accessToken
	 * @summary Update user infor by token
	 * @param {EntitiesUserReq} todo Updated User
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof UserApi
	 */
	public userUpdatePut(
		todo: EntitiesUserReq,
		options?: AxiosRequestConfig
	) {
		return UserApiFp(this.configuration)
			.userUpdatePut(todo, options)
			.then((request) => request(this.axios, this.basePath))
	}
}
